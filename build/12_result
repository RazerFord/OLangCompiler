Class           [0, 5) "class"
Space           [5, 6) " "
Identifier      [6, 10) "Base"
Space           [10, 11) " "
Is              [11, 13) "is"
NewLine         [13, 14) "\n"
End             [14, 17) "end"
NewLine         [17, 18) "\n"
NewLine         [18, 19) "\n"
Class           [19, 24) "class"
Space           [24, 25) " "
Identifier      [25, 26) "A"
Space           [26, 27) " "
Extends         [27, 34) "extends"
Space           [34, 35) " "
Identifier      [35, 39) "Base"
Space           [39, 40) " "
Is              [40, 42) "is"
NewLine         [42, 43) "\n"
End             [43, 46) "end"
NewLine         [46, 47) "\n"
NewLine         [47, 48) "\n"
Class           [48, 53) "class"
Space           [53, 54) " "
Identifier      [54, 58) "Main"
Space           [58, 59) " "
Is              [59, 61) "is"
NewLine         [61, 62) "\n"
Space           [62, 63) " "
Space           [63, 64) " "
Var             [64, 67) "var"
Space           [67, 68) " "
Identifier      [68, 75) "success"
Space           [75, 76) " "
Colon           [76, 77) ":"
Space           [77, 78) " "
BooleanLiteral  [78, 83) "false"

NewLine         [83, 84) "\n"
NewLine         [84, 85) "\n"
Space           [85, 86) " "
Space           [86, 87) " "
This            [87, 91) "this"
LBracket        [91, 92) "("
RBracket        [92, 93) ")"
Space           [93, 94) " "
Is              [94, 96) "is"
NewLine         [96, 97) "\n"
Space           [97, 98) " "
Space           [98, 99) " "
Space           [99, 100) " "
Space           [100, 101) " "
Var             [101, 104) "var"
Space           [104, 105) " "
Identifier      [105, 107) "v1"
Space           [107, 108) " "
Colon           [108, 109) ":"
Space           [109, 110) " "
Identifier      [110, 114) "Base"
NewLine         [114, 115) "\n"
Space           [115, 116) " "
Space           [116, 117) " "
Space           [117, 118) " "
Space           [118, 119) " "
Var             [119, 122) "var"
Space           [122, 123) " "
Identifier      [123, 125) "v2"
Space           [125, 126) " "
Colon           [126, 127) ":"
Space           [127, 128) " "
Identifier      [128, 129) "A"
NewLine         [129, 130) "\n"
Space           [130, 131) " "
Space           [131, 132) " "
Space           [132, 133) " "
Space           [133, 134) " "
NewLine         [134, 135) "\n"
Space           [135, 136) " "
Space           [136, 137) " "
Space           [137, 138) " "
Space           [138, 139) " "
Identifier      [139, 141) "v1"
Space           [141, 142) " "
Assign          [142, 144) ":="
Space           [144, 145) " "
Identifier      [145, 147) "v2"
NewLine         [147, 148) "\n"
NewLine         [148, 149) "\n"
Space           [149, 150) " "
Space           [150, 151) " "
Space           [151, 152) " "
Space           [152, 153) " "
Identifier      [153, 155) "if"
Space           [155, 156) " "
This            [156, 160) "this"
Dot             [160, 161) "."
Identifier      [161, 165) "test"
LBracket        [165, 166) "("
Identifier      [166, 168) "v1"
RBracket        [168, 169) ")"
Dot             [169, 170) "."
Identifier      [170, 175) "Equal"
LBracket        [175, 176) "("
IntegerLiteral  [176, 177) "1"
RBracket        [177, 178) ")"
Space           [178, 179) " "
Then            [179, 183) "then"
Space           [183, 184) " "
Identifier      [184, 191) "success"
Space           [191, 192) " "
Assign          [192, 194) ":="
Space           [194, 195) " "
BooleanLiteral  [195, 199) "true"

Space           [199, 200) " "
End             [200, 203) "end"
NewLine         [203, 204) "\n"
Space           [204, 205) " "
Space           [205, 206) " "
Space           [206, 207) " "
Space           [207, 208) " "
Identifier      [208, 210) "if"
Space           [210, 211) " "
This            [211, 215) "this"
Dot             [215, 216) "."
Identifier      [216, 220) "test"
LBracket        [220, 221) "("
Identifier      [221, 223) "v2"
RBracket        [223, 224) ")"
Dot             [224, 225) "."
Identifier      [225, 230) "Equal"
LBracket        [230, 231) "("
IntegerLiteral  [231, 232) "2"
RBracket        [232, 233) ")"
Space           [233, 234) " "
Then            [234, 238) "then"
Space           [238, 239) " "
Identifier      [239, 246) "success"
Space           [246, 247) " "
Assign          [247, 249) ":="
Space           [249, 250) " "
BooleanLiteral  [250, 254) "true"

Space           [254, 255) " "
End             [255, 258) "end"
NewLine         [258, 259) "\n"
Space           [259, 260) " "
Space           [260, 261) " "
End             [261, 264) "end"
NewLine         [264, 265) "\n"
NewLine         [265, 266) "\n"
Space           [266, 267) " "
Space           [267, 268) " "
Method          [268, 274) "method"
Space           [274, 275) " "
Identifier      [275, 279) "test"
LBracket        [279, 280) "("
Identifier      [280, 281) "v"
Colon           [281, 282) ":"
Space           [282, 283) " "
Identifier      [283, 287) "Base"
RBracket        [287, 288) ")"
Colon           [288, 289) ":"
Space           [289, 290) " "
Identifier      [290, 297) "Integer"
Space           [297, 298) " "
Is              [298, 300) "is"
NewLine         [300, 301) "\n"
Space           [301, 302) " "
Space           [302, 303) " "
Space           [303, 304) " "
Space           [304, 305) " "
Return          [305, 311) "return"
Space           [311, 312) " "
IntegerLiteral  [312, 313) "1"
NewLine         [313, 314) "\n"
Space           [314, 315) " "
Space           [315, 316) " "
End             [316, 319) "end"
NewLine         [319, 320) "\n"
NewLine         [320, 321) "\n"
Space           [321, 322) " "
Space           [322, 323) " "
Method          [323, 329) "method"
Space           [329, 330) " "
Identifier      [330, 334) "test"
LBracket        [334, 335) "("
Identifier      [335, 336) "v"
Colon           [336, 337) ":"
Space           [337, 338) " "
Identifier      [338, 339) "A"
RBracket        [339, 340) ")"
Colon           [340, 341) ":"
Space           [341, 342) " "
Identifier      [342, 349) "Integer"
Space           [349, 350) " "
Is              [350, 352) "is"
NewLine         [352, 353) "\n"
Space           [353, 354) " "
Space           [354, 355) " "
Space           [355, 356) " "
Space           [356, 357) " "
Return          [357, 363) "return"
Space           [363, 364) " "
IntegerLiteral  [364, 365) "2"
NewLine         [365, 366) "\n"
Space           [366, 367) " "
Space           [367, 368) " "
End             [368, 371) "end"
NewLine         [371, 372) "\n"
End             [372, 375) "end"
NewLine         [375, 376) "\n"
