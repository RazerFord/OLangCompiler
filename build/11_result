Class           [0, 5) "class"
Space           [5, 6) " "
Identifier      [6, 10) "Base"
Space           [10, 11) " "
Is              [11, 13) "is"
NewLine         [13, 14) "\n"
Space           [14, 15) " "
Space           [15, 16) " "
Method          [16, 22) "method"
Space           [22, 23) " "
Identifier      [23, 27) "test"
LBracket        [27, 28) "("
RBracket        [28, 29) ")"
Space           [29, 30) " "
Colon           [30, 31) ":"
Space           [31, 32) " "
Identifier      [32, 39) "Integer"
Space           [39, 40) " "
Is              [40, 42) "is"
NewLine         [42, 43) "\n"
Space           [43, 44) " "
Space           [44, 45) " "
Space           [45, 46) " "
Space           [46, 47) " "
Return          [47, 53) "return"
Space           [53, 54) " "
IntegerLiteral  [54, 55) "0"
NewLine         [55, 56) "\n"
Space           [56, 57) " "
Space           [57, 58) " "
End             [58, 61) "end"
NewLine         [61, 62) "\n"
NewLine         [62, 63) "\n"
Space           [63, 64) " "
Space           [64, 65) " "
Method          [65, 71) "method"
Space           [71, 72) " "
Identifier      [72, 76) "test"
LBracket        [76, 77) "("
Identifier      [77, 78) "i"
Colon           [78, 79) ":"
Space           [79, 80) " "
Identifier      [80, 87) "Integer"
RBracket        [87, 88) ")"
Space           [88, 89) " "
Colon           [89, 90) ":"
Space           [90, 91) " "
Identifier      [91, 98) "Integer"
Space           [98, 99) " "
Is              [99, 101) "is"
NewLine         [101, 102) "\n"
Space           [102, 103) " "
Space           [103, 104) " "
Space           [104, 105) " "
Space           [105, 106) " "
Return          [106, 112) "return"
Space           [112, 113) " "
IntegerLiteral  [113, 114) "1"
NewLine         [114, 115) "\n"
Space           [115, 116) " "
Space           [116, 117) " "
End             [117, 120) "end"
NewLine         [120, 121) "\n"
End             [121, 124) "end"
NewLine         [124, 125) "\n"
NewLine         [125, 126) "\n"
Class           [126, 131) "class"
Space           [131, 132) " "
Identifier      [132, 133) "A"
Space           [133, 134) " "
Extends         [134, 141) "extends"
Space           [141, 142) " "
Identifier      [142, 146) "Base"
Space           [146, 147) " "
Is              [147, 149) "is"
NewLine         [149, 150) "\n"
Space           [150, 151) " "
Space           [151, 152) " "
Method          [152, 158) "method"
Space           [158, 159) " "
Identifier      [159, 163) "test"
LBracket        [163, 164) "("
RBracket        [164, 165) ")"
Space           [165, 166) " "
Colon           [166, 167) ":"
Space           [167, 168) " "
Identifier      [168, 175) "Integer"
Space           [175, 176) " "
Is              [176, 178) "is"
NewLine         [178, 179) "\n"
Space           [179, 180) " "
Space           [180, 181) " "
Space           [181, 182) " "
Space           [182, 183) " "
Return          [183, 189) "return"
Space           [189, 190) " "
IntegerLiteral  [190, 191) "3"
NewLine         [191, 192) "\n"
Space           [192, 193) " "
Space           [193, 194) " "
End             [194, 197) "end"
NewLine         [197, 198) "\n"
End             [198, 201) "end"
NewLine         [201, 202) "\n"
NewLine         [202, 203) "\n"
Class           [203, 208) "class"
Space           [208, 209) " "
Identifier      [209, 213) "Main"
Space           [213, 214) " "
Is              [214, 216) "is"
NewLine         [216, 217) "\n"
Space           [217, 218) " "
Space           [218, 219) " "
Var             [219, 222) "var"
Space           [222, 223) " "
Identifier      [223, 230) "success"
Space           [230, 231) " "
Colon           [231, 232) ":"
Space           [232, 233) " "
BooleanLiteral  [233, 238) "false"

NewLine         [238, 239) "\n"
NewLine         [239, 240) "\n"
Space           [240, 241) " "
Space           [241, 242) " "
This            [242, 246) "this"
LBracket        [246, 247) "("
RBracket        [247, 248) ")"
Space           [248, 249) " "
Is              [249, 251) "is"
NewLine         [251, 252) "\n"
Space           [252, 253) " "
Space           [253, 254) " "
Space           [254, 255) " "
Space           [255, 256) " "
Var             [256, 259) "var"
Space           [259, 260) " "
Identifier      [260, 261) "v"
Space           [261, 262) " "
Colon           [262, 263) ":"
Space           [263, 264) " "
Identifier      [264, 268) "Base"
NewLine         [268, 269) "\n"
Space           [269, 270) " "
Space           [270, 271) " "
Space           [271, 272) " "
Space           [272, 273) " "
Identifier      [273, 274) "v"
Space           [274, 275) " "
Assign          [275, 277) ":="
Space           [277, 278) " "
Identifier      [278, 279) "A"
NewLine         [279, 280) "\n"
NewLine         [280, 281) "\n"
Space           [281, 282) " "
Space           [282, 283) " "
Space           [283, 284) " "
Space           [284, 285) " "
Identifier      [285, 287) "if"
Space           [287, 288) " "
Identifier      [288, 289) "v"
Dot             [289, 290) "."
Identifier      [290, 294) "test"
Dot             [294, 295) "."
Identifier      [295, 300) "Equal"
LBracket        [300, 301) "("
IntegerLiteral  [301, 302) "3"
RBracket        [302, 303) ")"
Space           [303, 304) " "
Then            [304, 308) "then"
Space           [308, 309) " "
Identifier      [309, 316) "success"
Space           [316, 317) " "
Assign          [317, 319) ":="
Space           [319, 320) " "
BooleanLiteral  [320, 324) "true"

Space           [324, 325) " "
End             [325, 328) "end"
NewLine         [328, 329) "\n"
Space           [329, 330) " "
Space           [330, 331) " "
Space           [331, 332) " "
Space           [332, 333) " "
Identifier      [333, 335) "if"
Space           [335, 336) " "
Identifier      [336, 337) "v"
Dot             [337, 338) "."
Identifier      [338, 342) "test"
LBracket        [342, 343) "("
IntegerLiteral  [343, 344) "1"
RBracket        [344, 345) ")"
Dot             [345, 346) "."
Identifier      [346, 351) "Equal"
LBracket        [351, 352) "("
IntegerLiteral  [352, 353) "1"
RBracket        [353, 354) ")"
Space           [354, 355) " "
Then            [355, 359) "then"
Space           [359, 360) " "
Identifier      [360, 367) "success"
Space           [367, 368) " "
Assign          [368, 370) ":="
Space           [370, 371) " "
BooleanLiteral  [371, 375) "true"

Space           [375, 376) " "
End             [376, 379) "end"
NewLine         [379, 380) "\n"
Space           [380, 381) " "
Space           [381, 382) " "
End             [382, 385) "end"
NewLine         [385, 386) "\n"
End             [386, 389) "end"
NewLine         [389, 390) "\n"
